# Logging

## Basic

```py
import logging

logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
logging.error('This is an error message')
logging.critical('This is a critical message')
```

## Config

`basicConfig(**kwargs)`

```py
logging.basicConfig(level=logging.DEBUG)
logging.debug('This will get logged')
```

All events at or above DEBUG level will now get logged.

### Logging to file

```py
import logging

logging.basicConfig(filename='app.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')
logging.warning('This will get logged to a file')
```

### Logging format and additional content

`logging.basicConfig(format='%(process)d-%(levelname)s-%(message)s')`

Other built in fields:
* `logging.basicConfig(format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S')`

logging variable data with string formatting - use FStrings
* `logging.error(f'{name} raised an error')`

Capturing output

```py
try:
	c = a / b
except Exception as e:
	logging.error("Exception occurred", exc_info=True)
```

or you can use `logging.exception("Exception occurred")`
